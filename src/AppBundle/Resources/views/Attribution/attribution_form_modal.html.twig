{% if form.id is not defined %}
    {%  set header = 'Ajouter une attribution' %}
    {%  set buttonText = 'Ajouter' %}
{% else %}
    {%  set header = 'Modifier une attribution' %}
    {%  set buttonText = 'Modifier' %}
{% endif %}

{% form_theme form '@App/Templates/form_template.html.twig' %}

<div id="modal-add-attribution" class="ui small modal">
    <div class="header">
        {{ header }}
    </div>

    <div class="content">

        <div id="message-box" class="ui icon message">
            <i class="exclamation icon"></i>
            <div class="content">
                <div class="header"></div>
                <p id="messages"></p>
            </div>
        </div>

        {{ form_errors(form) }}

        {{ form_start(form, {'attr': {'class': 'ui form'}}) }}

        {{ form_rest(form) }}

        <div id="progress-bar" class="ui indicating progress">
            <div class="bar"></div>
            <div class="label">Ajout des attributions en cours...</div>
        </div>


        <div class="ui field">
            <input type="submit" class="ui green button" value="{{ buttonText }}" />
        </div>


        {{ form_end(form) }}

    </div>
    <div class="actions">
        <div class="ui button">Annuler</div>
    </div>


    <script>
        function postForm( $form, callback ){

            /*
             * Get all form values
             */
            var values = {};
            var iterators = [];
            $.each( $form.serializeArray(), function(i, field) {

                /* Si le champ est défini comme "multi", l'utiliser comme un itérateur
                *  il faudra éxécuter le formulaire pour chacun de ces élément */
                if($("input[name='"+field.name+"']").data('multi') == true)
                    iterators.push({fieldName: field.name, fieldValues: field.value});
                else
                    values[field.name] = field.value;
            });

            $('#message-box').hide();
            $('#progress-bar').show();
            $('#progress-bar').progress('reset');

            /* Calcule le nombre total d'opérations à effectuer pour la progress bar */
            nbOperationsDone = 0;
            nbOperations = 1;
            if(iterators.length > 0) {
                $(iterators).each(function() {
                    nbOperations *= this.fieldValues.split(',').length;
                });
            }

            postFormValues($form, iterators, values);
        }

        function postFormValues($form, iterators, values) {

            /* S'il y a des champs multi */
            if(iterators.length > 0) {

                /* Extrait le premier itérateur */
                var iterator = iterators.shift();

                /* Extrait chaque valeur */
                var fieldValues = iterator.fieldValues.split(',');

                /* Pur chacune des valeur de la liste */
                for(var i=0; i<fieldValues.length; i++) {

                    /* Définir la valeur pour l'appel récusrsif */
                    values[iterator.fieldName] = fieldValues[i];

                    /* On effectue l'appel récursif (l'iétrateur actuel est déjà extrait) */
                    postFormValues($form, iterators, values);
                }

            }

            /* S'il n'y a pas de champ multi */
            else {

                /*
                 * Throw the form values to the server!
                 */
                $.ajax({
                    type        : $form.attr( 'method' ),
                    url         : $form.attr( 'action' ),
                    data        : values,
                    success     : function(data) {

                        if(data == true) {
                            nbOperationsDone++;
                            console.log(nbOperationsDone);
                            $('#progress-bar').progress({value:nbOperationsDone, total:nbOperations});

                            if (nbOperationsDone == nbOperations)
                                location.reload();
                        }
                        else
                            $('#modal-add-attribution').parent().html(data);

                    },
                    error       : function(xhr, ajaxOptions, thrownError) {
                        $('#message-box .header').html("Erreur lors de l'envoi du formulaire");
                        $('#message-box #messages').html("Détails : " + xhr.status + " / " + thrownError);
                        $('#message-box').addClass('error');
                        $('#message-box').show();
                    }
                });
            }


        }

        $(document).ready(function(){

            $('#progress-bar').hide();
            $('#message-box').hide();

            var forms = [
                '[ name="{{ form.vars.full_name }}"]'
            ];

            $( forms.join(',') ).submit( function( e ){
                e.preventDefault();

                postForm( $(this), function( response ){
                });

                return false;
            });

        });

    </script>

</div>
