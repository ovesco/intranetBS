<?php

namespace Interne\FinancesBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * FactureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FactureRepository extends EntityRepository
{
    /*
     * cette fonction est utilisée par le formulaire de recherche de facture.
     * on crée une requete custom.
     */
    public function findBySearch($facture,$searchParameters = null)
    {
        //on crée un nouvelle requete qui sera custom
        $queryBuilder = $this->createQueryBuilder('facture');

        /*
         * Elements de recherche contenu dans le formulaire de facture standard
         */

        $parameter = $facture->getId();
        if($parameter != null)
        {
            $queryBuilder->andWhere('facture.id = :id')->setParameter('id', $parameter);
        }

        $parameter = $facture->getStatut();
        if($parameter != null)
        {
            $queryBuilder->andWhere('facture.statut = :statut')->setParameter('statut', $parameter);
        }

        $parameter = $facture->getDateCreation();
        if($parameter != null)
        {
            $queryBuilder->andWhere('facture.dateCreation = :dateCreation')
                ->setParameter('dateCreation', $parameter);
        }

        $parameter = $facture->getDatePayement();
        if($parameter != null)
        {
            $queryBuilder->andWhere('facture.datePayement = :datePayement')
                ->setParameter('datePayement', $parameter);
        }


        /*
         *
         * Elements de recherche spécifique qui permet d'affiner la recherche.
         *
         */

        if($searchParameters != null) {


            $parameter = $searchParameters['dateCreationMaximum'];
            if ($parameter != null) {
                $queryBuilder->andWhere('facture.dateCreation <= :dateCreationMaximum')
                    ->setParameter('dateCreationMaximum', $parameter);
            }
            $parameter = $searchParameters['dateCreationMinimum'];
            if ($parameter != null) {
                $queryBuilder->andWhere('facture.dateCreation >= :dateCreationMinimum')
                    ->setParameter('dateCreationMinimum', $parameter);
            }

            $parameter = $searchParameters['datePayementMaximum'];
            if ($parameter != null) {
                $queryBuilder->andWhere('facture.datePayement <= :datePayement')
                    ->setParameter('datePayement', $parameter);
            }

            $parameter = $searchParameters['datePayementMinimum'];
            if ($parameter != null) {
                $queryBuilder->andWhere('facture.datePayement >= :datePayement')
                    ->setParameter('datePayement', $parameter);
            }

            /*
             * Activer la jointure uniquement si un des parametres de recherche
             * concerne les rappels. Sinon il y a exculusion direct des factures
             * sans rappel.
             */
            $parameter = $searchParameters['nombreRappel'];
            if ($parameter != null) {

                if ($parameter != 0) {

                    $queryBuilder
                        ->innerJoin('facture.rappels', 'rappel')
                        ->GroupBy('facture')
                        ->andHaving('COUNT(rappel) = :nbrappel')
                        ->setParameter('nbrappel',$parameter);
                }
            }

        }

        if($facture->getCreances()->count() != 0)
        {
            /*
             * Jointure avec les éléments de recherche contenu dans la partie cérance
             */
            $queryBuilder->innerJoin('Interne\FinancesBundle\Entity\Creance', 'creance', 'WITH', 'facture.id = creance.facture');

            //On récupère la créance contenu dans la facture
            $creances = $facture->getCreances();
            $creance = $creances[0];

            //On recherche les créances qui corresponde la créance contenu dans la facture
            $creances = $this->getEntityManager()->getRepository('InterneFinancesBundle:Creance')->findBySearch($creance);

            //On crée la liste des ids de tout les créances trouvée
            $arrayIds = array();
            foreach($creances as $creance)
            {
                array_push($arrayIds,$creance->getId());
            }
            //On cherche tout les factures liées aux créances trouvée.
            $queryBuilder->andWhere('creance.id IN (:ids)')->setParameter('ids', array_values($arrayIds));
        }




        return $queryBuilder->getQuery()->getResult();



    }


    public function findByNombreRappel($nb)
    {
        $queryBuilder = $this->createQueryBuilder('facture')
            ->innerJoin('facture.rappels', 'rappel')
            ->GroupBy('facture')
            ->andHaving('COUNT(rappel) = :nb')
            ->setParameter('nb',$nb);
        return  $queryBuilder->getQuery()->getResult();
    }

    public function getNombreRappelArray()
    {
        /*
         * On commence par chercher le nombre de facture ouvertes.
         * (avec ou sans rappel)
         */
        $queryBuilder = $this->createQueryBuilder('facture')
            ->andWhere('facture.statut = :statut')
            ->setParameter('statut', 'ouverte')
            ->addSelect('COUNT(facture) as nfacture');
        $result =  $queryBuilder->getQuery()->getResult();
        $nbFactureOuverte = $result[0]['nfacture'];


        /*
         * On extrait un tableau contenant le nombre
         * de rappel de chaque facture.
         */
        $queryBuilder = $this->createQueryBuilder('facture')
            ->andWhere('facture.statut = :statut')
            ->setParameter('statut', 'ouverte')
            ->innerJoin('facture.rappels', 'rappel')
            ->GroupBy('facture')
            ->addSelect('COUNT(rappel) as nrappel');
        $resultArray =  $queryBuilder->getQuery()->getResult();
        $nbFactureWithRappel = count($resultArray);


        /*
         * On formate le tableau de réponse:
         * index: nombre de rappel
         * valeur: nombre de facture ayant ce nombre de rappel
         */
        $maxNombreRappel = -1;
        $data = array();
        foreach($resultArray as $result) {
            $nombreRappel = $result['nrappel'];
            if ($nombreRappel > $maxNombreRappel) {
                for ($i = $maxNombreRappel + 1; $i <= $nombreRappel; $i++) {
                    $data[$i] = 0;
                }
                $maxNombreRappel = $nombreRappel;
            }
            $data[$nombreRappel]++;
        }
        $data[0] = $nbFactureOuverte-$nbFactureWithRappel;

        return $data;

    }



}
